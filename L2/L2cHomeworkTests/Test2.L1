// print evens in the given range

(:main
    (:main
       0 0
        rdi <- 1
        rsi <- 50
        mem rsp -8 <- :print_even_range
        call :even_range 2
        :print_even_range
        rdi <- rax
        call print 1
        return
    )

    (:even_range
        2 2
        
        :cjump rdi &= 1 :add_one :loop // add one if the number is not even

        mem rsp 0 <- rdi
	    mem rsp 8 <- rsi
	    rsi -= rdi
	    rdi <- rsi
	    rdi <<= 1         	// encode
	    rdi += 1          	// of size rdi
	    rsi <- 1          	// each element has rsi
	    call allocate 2		// rdi & rsi used as arguments for allocate
	    rdx <- rax          // rdx is array
	    rax += 8            // move rax pointer past header to actual first element
	    rdi <- mem rsp 0    // restore rdi & rsi
	    rsi <- mem rsp 8	
	    rsi -= rdi    		
        :loop
        cjump rsi <= 0 :done :more
        :more
        rcx <- rdi
        rcx <<= 1
        rsi -= 1
        rcx += 1
        rdi += 1
        rax += 8
        goto :loop
        :done
        rax <- rdx
        :return
        
        :minus_one
        rdi <<= 1
        rdi += 1
        goto :loop
    )
)
